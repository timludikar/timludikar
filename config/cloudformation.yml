---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Creates a static website (S3, CloudFront and Route53 record)'
Parameters:
  Env:
    Type: String
    Description: 'Env type'
  DomainName:
    Type: String
    Description: 'References an existing Route53 zone. Eg. moprea.ro'
  SubDomain:
    Type: String
    Description: 'Subdomain for referenced hosted zone'
  ExistingAcmCertificate:
    Type: String
    Description: 'the Amazon Resource Name (ARN) of an AWS Certificate Manager (ACM) certificate.'
    AllowedPattern: "arn:aws:acm:.*"
  GitHubUser:
    Type: String
    Description: GitHub User
    Default: "timludikar"
  GitHubRepo:
    Type: String
    Description: GitHub Repo to pull from. Only the Name. not the URL
    Default: "timludikar"
  GitHubBranch:
    Type: String
    Description: GitHub Branch
    Default: "master"
  GitHubToken:
    NoEcho: true
    Type: String
    Description: Secret. It might look something like 9b189a1654643522561f7b3ebd44a1531a4287af OAuthToken with access to Repo. Go to https://github.com/settings/tokens

Conditions:
  IsDev: !Equals [!Ref Env, 'dev']

Resources:
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - codebuild.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: codebuild-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: "*"
            Resource: "*"
          Version: '2012-10-17'

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - codepipeline.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: codepipeline-service
          PolicyDocument:
            Statement:
              - Action:
                - codebuild:*
                Resource: "*"
                Effect: Allow
              - Action:
                - s3:GetObject
                - s3:GetObjectVersion
                - s3:GetBucketVersioning
                Resource: "*"
                Effect: Allow
              - Action:
                - s3:PutObject
                Resource:
                - arn:aws:s3:::codepipeline*
                Effect: Allow
              - Action:
                - s3:*
                - cloudformation:*
                - iam:PassRole
                Resource: "*"
                Effect: Allow
            Version: '2012-10-17'

  PipelineBucket:
    Type: AWS::S3::Bucket

  WebsiteBucket:
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: PublicRead
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: 404.html
        RoutingRules:
          -
            RedirectRule:
              ReplaceKeyWith: 'index.html'
            RoutingRuleCondition:
              KeyPrefixEquals: '/'
    DeletionPolicy: Retain

  WebsiteBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref 'WebsiteBucket'
      PolicyDocument:
        Statement:
          - Sid: PublicReadForGetBucketObjects
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub 'arn:aws:s3:::${WebsiteBucket}/*'

  CodeBuildDeploySite:
    Type: AWS::CodeBuild::Project
    DependsOn: CodeBuildRole
    Properties:
      Name: !Sub ${AWS::StackName}-DeploySite
      Description: Deploy site to S3.
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: "aws/codebuild/nodejs:6.3.1"
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2
            phases:
              install:
                commands:
                  - npm install
              build:
                commands:
                  - npm run build
              post_build:
                commands:
                  - aws s3 cp --recursive --acl public-read ./public s3://${WebsiteBucket}/ 
            artifacts:
              type: zip
              files:
                - ./public/**/*
  
  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref PipelineBucket
      Stages:
        - Name: Source
          Actions:
            - InputArtifacts: []
              Name: Source
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: '1'
                Provider: GitHub
              OutputArtifacts:
                - Name: SourceOutput
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
        - Name: Deploy
          Actions:
            - Name: Artifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: '1'
                Provider: CodeBuild
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: DeployOutput
              Configuration:
                ProjectName: !Ref CodeBuildDeploySite
            
  WebsiteCloudfront:
    Type: AWS::CloudFront::Distribution
    DependsOn:
      - WebsiteBucket
    Properties:
      DistributionConfig:
        Comment: !Sub 'Cloudfront Distribution for ${SubDomain}.${DomainName}'
        Origins:
          # Use S3 website endpoint to allow S3 redirect rules
          - DomainName: !Sub "${WebsiteBucket}.s3-website-${AWS::Region}.amazonaws.com"
            Id: S3Origin
            CustomOriginConfig:
              HTTPPort: '80'
              HTTPSPort: '443'
              OriginProtocolPolicy: http-only
        CustomErrorResponses:
          # Use our own custom 404 page for 404 errors and cache response for 1h
          - ErrorCode: 404
            ResponseCode: 404
            ResponsePagePath: '/404.html'
            ErrorCachingMinTTL: 3600
          # Use custom 404 pages for missing S3 objects and cache for 5 min
          - ErrorCode: 403
            ResponseCode: 404
            ResponsePagePath: '/404.html'
            ErrorCachingMinTTL: 300
        Enabled: true
        HttpVersion: 'http2'
        DefaultRootObject: 'index.html'
        Aliases:
          - !Sub '${SubDomain}.${DomainName}'
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
          DefaultTTL: !If [IsDev, 0, 86400]
          Compress: true
          TargetOriginId: S3Origin
          ForwardedValues:
            QueryString: false
            Cookies:
              Forward: none
          ViewerProtocolPolicy: 'redirect-to-https'
        ViewerCertificate:
          AcmCertificateArn: !Ref ExistingAcmCertificate
          SslSupportMethod: 'sni-only'

  WebsiteDNSName:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub "${DomainName}."
      RecordSets:
        - Name: !Sub '${SubDomain}.${DomainName}.'
          Type: A
          AliasTarget:
            HostedZoneId: 'Z2FDTNDATAQYW2'
            DNSName: !GetAtt WebsiteCloudfront.DomainName
        - Name: !Sub '${SubDomain}.${DomainName}.'
          Type: AAAA
          AliasTarget:
            HostedZoneId: 'Z2FDTNDATAQYW2'
            DNSName: !GetAtt WebsiteCloudfront.DomainName

Outputs:
  BucketName:
    Value: !Ref WebsiteBucket
    Description: 'Name of S3 bucket to hold website content'
  CloudfrontEndpoint:
    Value: !GetAtt WebsiteCloudfront.DomainName
    Description: 'Endpoint for Cloudfront distribution'
  WebsiteUrl:
    Value: !Sub 'https://${SubDomain}.${DomainName}'